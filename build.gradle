import javax.management.MBeanServerConnection
import javax.management.MBeanServerInvocationHandler
import javax.management.ObjectName
import javax.management.remote.JMXConnector
import javax.management.remote.JMXConnectorFactory
import javax.management.remote.JMXConnectorFactory as JmxFactory
import javax.management.remote.JMXServiceURL
import javax.management.remote.JMXServiceURL as JmxUrl

apply plugin: 'java'
apply plugin: 'idea'

interface IProxy {
    String getVersion();

    String getSessionId();

    void setSessionId(String id);

    byte[] getExecutionData(boolean reset);

    void dump(boolean reset);

    void reset();
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.5', classifier: 'runtime'
        classpath group: 'org.jacoco', name: 'org.jacoco.core', version: '0.8.5'
    }
}

group "org.gradle.sample"
version "0.1.0.0"


repositories {
    jcenter()
    mavenCentral()
}

configurations {
    jacocoAnt
    jacocoRuntime
}


dependencies {
    //offline instrument via ant task
    jacocoAnt group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.5', classifier: 'nodeps'

    //the jacoco runtime private for RT.getAgent()
    jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.5', classifier: 'runtime'

    testImplementation 'junit:junit:4.12'
}


task instrument(dependsOn: ['classes']) {
    ext.outputDir = buildDir.path + '/classes-instrumented'
    doLast {
        ant.taskdef(name: 'instrument',
                classname: 'org.jacoco.ant.InstrumentTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.instrument(destdir: outputDir) {
            sourceSets.main.output.classesDirs.each { fileset(dir: it) }
        }
    }
}

task sampletestworks(type: Test) {
    forkEvery 1
    maxParallelForks 1

    doFirst {
        println "org.jacoco.agent.rt.RT loaded from " + RT.class.getProtectionDomain().getCodeSource()
        systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/firsttests.exec'
        classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
    }
}

task sampletest(type: Test) {
    ignoreFailures = true
    //jars used every step is same.
    println classpath.asPath

    forkEvery 1
    maxParallelForks 1

    systemProperty( "jmx", true)
    jvmArgs("-Djmx=true")
    jvmArgs("-Dcom.sun.management.jmxremote.port=9998")
    jvmArgs("-Dcom.sun.management.jmxremote.ssl=false")
    jvmArgs("-Dcom.sun.management.jmxremote.authenticate=false")



    doFirst {
        systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/firsttests.exec'
        classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
        project.logger.info("doFirst:pid  " +java.lang.management.ManagementFactory.getRuntimeMXBean().getName());
    }

    beforeTest { TestDescriptor descriptor ->
        systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/firstsectests.exec'
        System.out.println("beforetest:pid of beforeTest " +java.lang.management.ManagementFactory.getRuntimeMXBean().getName());




        //agent not started error
        String SERVICE_URL = "service:jmx:rmi:///jndi/rmi://localhost:9998/jmxrmi"
        // Open connection to the coverage agent:
        final JMXServiceURL url = new JMXServiceURL(SERVICE_URL);
        final JMXConnector jmxc = JMXConnectorFactory.connect(url, null);
        final MBeanServerConnection connection = jmxc
                .getMBeanServerConnection();

        final IProxy proxy = (IProxy) MBeanServerInvocationHandler
                .newProxyInstance(connection,
                        new ObjectName("org.jacoco:type=Runtime"), IProxy.class,
                        false);

        // Retrieve JaCoCo version and session id:
        println ("Version: " + proxy.getVersion());
        println("Session: " + proxy.getSessionId());

        // Retrieve dump and write to file:
        final byte[] data = proxy.getExecutionData(false);
        final FileOutputStream localFile = new FileOutputStream(DESTFILE);
        localFile.write(data);
        localFile.close();

        // Close connection:
        jmxc.close();

    }



    afterTest { TestDescriptor descriptor ->
        //get agent will fail with Agent not started.
        println ("beforetest:pid of afterTest" +java.lang.management.ManagementFactory.getRuntimeMXBean().getName());

    }
}

//instrument and run a test.
sampletest.dependsOn(instrument)

